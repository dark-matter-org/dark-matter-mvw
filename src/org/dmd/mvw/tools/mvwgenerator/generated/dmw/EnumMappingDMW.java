package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.HashSet;                                                              // To support getMVCopy() - (BaseDMWGenerator.java:1200)
import java.util.Iterator;                                                             // Support copy of MV objects - (BaseDMWGenerator.java:2240)
import org.dmd.dmc.*;                                                                  // If any attributes - (BaseDMWGenerator.java:1087)
import org.dmd.dmc.types.CamelCaseName;                                                // Is named by - (BaseDMWGenerator.java:1062)
import org.dmd.dms.ClassDefinition;                                                    // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:1067)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                            // Required for MODREC constructor - (BaseDMWGenerator.java:1072)
import org.dmd.dms.generated.dmw.StringIterableDMW;                                    // For multi-valued String - (BaseDMWGenerator.java:2103)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                  // Required for MODREC constructor - (BaseDMWGenerator.java:1071)
import org.dmd.mvw.tools.mvwgenerator.extended.EnumMappingGenerator;                   // Is reference type - (BaseDMWGenerator.java:1107)
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                          // Derived class - (BaseDMWGenerator.java:1248)
import org.dmd.mvw.tools.mvwgenerator.extended.forms.EnumMapping;                      // Required for getModificationRecorder() - (BaseDMWGenerator.java:1076)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EnumMappingDMO;                    // Class not auxiliary or abstract - (BaseDMWGenerator.java:1252)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                          // Attribute skipEnumValue from the mvw schema - (BaseDMWGenerator.java:897)
import org.dmd.mvw.tools.mvwgenerator.generated.types.EnumMappingGeneratorREF;         // Is reference type REF - (BaseDMWGenerator.java:1115)



/**
 * The EnumMapping class allows for generation of a set of static data
 * instances\n that represent the values from the specified enumeration
 * (type). Depending on the widget set\n you're using, you will specify
 * different mappingGenerators; these are defined as extensions\n to the
 * standard MVW generation mechanisms. For example, the dark-matter-gxt
 * project defines\n the GXTEnumGenerator generator that will generate code
 * that maps an enum to code that can be used with\n a selector widget.\n <p
 * />\n Enum values are comprised of an integer, a name, a description and
 * optionally, a label as follows - int name description : label.\n If you
 * specify useNameAsLabel, the uppercase name value of the enum is used to
 * display the value\n of the. If useNameAsLabel is not specified, the label
 * will be used if it has been specified. Otherwise,\n the description is
 * used.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:479)
 */
abstract public class EnumMappingDMW extends MvwDefinition implements DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:558)
    public EnumMappingDMW() {
        super(new EnumMappingDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._EnumMapping);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:564)
    public EnumMappingDMW(DmcTypeModifierMV mods) {
        super(new EnumMappingDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._EnumMapping);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:606)
    public EnumMapping getModificationRecorder(){
        EnumMapping rc = new EnumMapping();
        rc.setMappingName(getMappingName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:627)
    public EnumMappingDMW(EnumMappingDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._EnumMapping);
    }

    public EnumMapping cloneIt() {
        EnumMapping rc = new EnumMapping();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public EnumMappingDMO getDMO() {
        return((EnumMappingDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:642)
    protected EnumMappingDMW(EnumMappingDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1297)
    public CamelCaseName getObjectName(){
        return(((EnumMappingDMO) core).getMappingName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((EnumMappingDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof EnumMappingDMW){
            return( getObjectName().equals( ((EnumMappingDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public String getEmptyText(){
        return(((EnumMappingDMO) core).getEmptyText());
    }

    /**
     * Sets emptyText to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setEmptyText(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).setEmptyText(value);
    }

    /**
     * Sets emptyText to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setEmptyText(String value){
        ((EnumMappingDMO) core).setEmptyText(value);
    }

    /**
     * Removes the emptyText attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remEmptyText(){
        ((EnumMappingDMO) core).remEmptyText();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public String getEnumName(){
        return(((EnumMappingDMO) core).getEnumName());
    }

    /**
     * Sets enumName to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setEnumName(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).setEnumName(value);
    }

    /**
     * Sets enumName to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setEnumName(String value){
        ((EnumMappingDMO) core).setEnumName(value);
    }

    /**
     * Removes the enumName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remEnumName(){
        ((EnumMappingDMO) core).remEnumName();
    }

    /**
     * @return A EnumMappingGenerator object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1434)
    public EnumMappingGenerator getMappingGenerator(){
        EnumMappingGeneratorREF ref = ((EnumMappingDMO) core).getMappingGenerator();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((EnumMappingGenerator)ref.getObject().getContainer());
    }

    /**
     * Sets the mappingGenerator to the specified value.
     * @param value A value compatible with EnumMappingGeneratorREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1519)
    public void setMappingGenerator(EnumMappingGenerator value) {
        ((EnumMappingDMO) core).setMappingGenerator(value.getDMO());
    }

    /**
     * Sets the mappingGenerator to the specified value.
     * @param value A value compatible with EnumMappingGeneratorREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1528)
    public void setMappingGenerator(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).setMappingGenerator(value);
    }

    /**
     * Removes the mappingGenerator attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remMappingGenerator(){
        ((EnumMappingDMO) core).remMappingGenerator();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public CamelCaseName getMappingName(){
        return(((EnumMappingDMO) core).getMappingName());
    }

    /**
     * Sets mappingName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setMappingName(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).setMappingName(value);
    }

    /**
     * Sets mappingName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setMappingName(CamelCaseName value){
        ((EnumMappingDMO) core).setMappingName(value);
    }

    /**
     * Removes the mappingName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remMappingName(){
        ((EnumMappingDMO) core).remMappingName();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getSkipEnumValueSize(){
        return(((EnumMappingDMO) core).getSkipEnumValueSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getSkipEnumValueIsEmpty(){
        if (((EnumMappingDMO) core).getSkipEnumValueSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getSkipEnumValueHasValue(){
        if (((EnumMappingDMO) core).getSkipEnumValueSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2107)
    public StringIterableDMW getSkipEnumValueIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__skipEnumValue);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((EnumMappingDMO) core).getSkipEnumValue()));
    }

    /**
     * Adds another skipEnumValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2133)
    public void addSkipEnumValue(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).addSkipEnumValue(value);
    }

    /**
     * Adds another skipEnumValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2143)
    public void addSkipEnumValue(String value){
        ((EnumMappingDMO) core).addSkipEnumValue(value);
    }

    /**
     * Returns true if the collection contains the skipEnumValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2200)
    public boolean skipEnumValueContains(String value){
        return(((EnumMappingDMO) core).skipEnumValueContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2244)
    @SuppressWarnings("unchecked")
    public HashSet<String> getSkipEnumValueCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__skipEnumValue);
        if (attr == null)
            return(new HashSet<String>());
        
        HashSet<String> rc = new HashSet<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a skipEnumValue value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2271)
    public void delSkipEnumValue(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).delSkipEnumValue(value);
    }

    /**
     * Deletes a skipEnumValue value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2280)
    public void delSkipEnumValue(String value){
        ((EnumMappingDMO) core).delSkipEnumValue(value);
    }

    /**
     * Removes the skipEnumValue attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remSkipEnumValue(){
        ((EnumMappingDMO) core).remSkipEnumValue();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public String getUnsetValue(){
        return(((EnumMappingDMO) core).getUnsetValue());
    }

    /**
     * Sets unsetValue to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setUnsetValue(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).setUnsetValue(value);
    }

    /**
     * Sets unsetValue to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setUnsetValue(String value){
        ((EnumMappingDMO) core).setUnsetValue(value);
    }

    /**
     * Removes the unsetValue attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remUnsetValue(){
        ((EnumMappingDMO) core).remUnsetValue();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public Boolean isUseNameAsLabel(){
        return(((EnumMappingDMO) core).isUseNameAsLabel());
    }

    /**
     * Sets useNameAsLabel to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setUseNameAsLabel(Object value) throws DmcValueException {
        ((EnumMappingDMO) core).setUseNameAsLabel(value);
    }

    /**
     * Sets useNameAsLabel to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setUseNameAsLabel(Boolean value){
        ((EnumMappingDMO) core).setUseNameAsLabel(value);
    }

    /**
     * Removes the useNameAsLabel attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remUseNameAsLabel(){
        ((EnumMappingDMO) core).remUseNameAsLabel();
    }


}
