package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.TreeSet;                                                                 // To support getMVCopy() - (BaseDMWGenerator.java:1096)
import org.dmd.dmc.*;                                                                     // If any attributes - (BaseDMWGenerator.java:977)
import org.dmd.dmc.types.CamelCaseName;                                                   // Is named by - (BaseDMWGenerator.java:939)
import org.dmd.dms.ClassDefinition;                                                       // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:944)
import org.dmd.dms.generated.dmo.ClassDefinitionDMO;                                      // For multi-valued adds of ClassDefinition - (BaseDMWGenerator.java:1657)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                               // Required for MODREC constructor - (BaseDMWGenerator.java:949)
import org.dmd.dms.generated.dmw.ClassDefinitionIterableDMW;                              // For multi-valued ClassDefinition - (BaseDMWGenerator.java:1599)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                     // Required for MODREC constructor - (BaseDMWGenerator.java:948)
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                             // Derived class - (BaseDMWGenerator.java:1138)
import org.dmd.mvw.tools.mvwgenerator.extended.PropertyAccess;                            // Required for getModificationRecorder() - (BaseDMWGenerator.java:953)
import org.dmd.mvw.tools.mvwgenerator.extended.PropertyAccessGenerator;                   // Is reference type - (BaseDMWGenerator.java:997)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                             // Attribute accessFor from the mvw schema - (BaseDMWGenerator.java:910)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.PropertyAccessDMO;                    // Class not auxiliary or abstract - (BaseDMWGenerator.java:1142)
import org.dmd.mvw.tools.mvwgenerator.generated.types.PropertyAccessGeneratorREF;         // Is reference type REF - (BaseDMWGenerator.java:1005)



/**
 * The PropertyAccess class allows for the specification of a set of
 * classes\n for which you'd like to invoke the specified property access
 * generator that creates\n property access mechanisms.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
 */
abstract public class PropertyAccessDMW extends MvwDefinition implements DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:577)
    public PropertyAccessDMW() {
        super(new PropertyAccessDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._PropertyAccess);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:583)
    public PropertyAccessDMW(DmcTypeModifierMV mods) {
        super(new PropertyAccessDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._PropertyAccess);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:625)
    public PropertyAccess getModificationRecorder(){
        PropertyAccess rc = new PropertyAccess();
        rc.setPropertyAccessName(getPropertyAccessName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:646)
    public PropertyAccessDMW(PropertyAccessDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._PropertyAccess);
    }

    public PropertyAccess cloneIt() {
        PropertyAccess rc = new PropertyAccess();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public PropertyAccessDMO getDMO() {
        return((PropertyAccessDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:661)
    protected PropertyAccessDMW(PropertyAccessDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1187)
    public CamelCaseName getObjectName(){
        return(((PropertyAccessDMO) core).getPropertyAccessName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((PropertyAccessDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof PropertyAccessDMW){
            return( getObjectName().equals( ((PropertyAccessDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of ClassDefinition items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1561)
    public int getAccessForSize(){
        return(((PropertyAccessDMO) core).getAccessForSize());
    }

    /**
     * @return true if there are no ClassDefinitionDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1569)
    public boolean getAccessForIsEmpty(){
        if (((PropertyAccessDMO) core).getAccessForSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ClassDefinitionDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1579)
    public boolean getAccessForHasValue(){
        if (((PropertyAccessDMO) core).getAccessForSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of ClassDefinitionDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1606)
    public ClassDefinitionIterableDMW getAccessForIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__accessFor);
        if (attr == null)
            return(ClassDefinitionIterableDMW.emptyList);
        
        return(new ClassDefinitionIterableDMW(((PropertyAccessDMO) core).getAccessFor()));
    }

    /**
     * Adds another accessFor value.
     * @param value A value compatible with ClassDefinition
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1663)
    public DmcAttribute<?> addAccessFor(ClassDefinition value){
        DmcAttribute<?> attr = ((PropertyAccessDMO) core).addAccessFor(((ClassDefinitionDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a accessFor value.
     * @param value The ClassDefinition to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1713)
    public void delAccessFor(ClassDefinition value){
        ((PropertyAccessDMO) core).delAccessFor(value.getDMO());
    }

    /**
     * @return A COPY of the collection of ClassDefinition objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1777)
    public TreeSet<ClassDefinition> getAccessForCopy(){
        DmcAttribute<?> attr = ((PropertyAccessDMO) core).get(MvwDMSAG.__accessFor);
        if (attr == null)
            return(new TreeSet<ClassDefinition>());
        
        TreeSet<ClassDefinition> rc = new TreeSet<ClassDefinition>();
        
        ClassDefinitionIterableDMW it = getAccessForIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the accessFor attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2182)
    public void remAccessFor(){
        ((PropertyAccessDMO) core).remAccessFor();
    }

    /**
     * @return A PropertyAccessGenerator object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1324)
    public PropertyAccessGenerator getAccessGenerator(){
        PropertyAccessGeneratorREF ref = ((PropertyAccessDMO) core).getAccessGenerator();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((PropertyAccessGenerator)ref.getObject().getContainer());
    }

    /**
     * Sets the accessGenerator to the specified value.
     * @param value A value compatible with PropertyAccessGeneratorREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1409)
    public void setAccessGenerator(PropertyAccessGenerator value) {
        ((PropertyAccessDMO) core).setAccessGenerator(value.getDMO());
    }

    /**
     * Sets the accessGenerator to the specified value.
     * @param value A value compatible with PropertyAccessGeneratorREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1418)
    public void setAccessGenerator(Object value) throws DmcValueException {
        ((PropertyAccessDMO) core).setAccessGenerator(value);
    }

    /**
     * Removes the accessGenerator attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1509)
    public void remAccessGenerator(){
        ((PropertyAccessDMO) core).remAccessGenerator();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public CamelCaseName getPropertyAccessName(){
        return(((PropertyAccessDMO) core).getPropertyAccessName());
    }

    /**
     * Sets propertyAccessName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public void setPropertyAccessName(Object value) throws DmcValueException {
        ((PropertyAccessDMO) core).setPropertyAccessName(value);
    }

    /**
     * Sets propertyAccessName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1483)
    public void setPropertyAccessName(CamelCaseName value){
        ((PropertyAccessDMO) core).setPropertyAccessName(value);
    }

    /**
     * Removes the propertyAccessName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1509)
    public void remPropertyAccessName(){
        ((PropertyAccessDMO) core).remPropertyAccessName();
    }


}
