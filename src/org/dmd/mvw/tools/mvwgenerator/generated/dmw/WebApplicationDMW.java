package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.ArrayList;                                                                // To support getMVCopy() - (BaseDMWGenerator.java:1181)
import org.dmd.dmc.*;                                                                      // If any attributes - (BaseDMWGenerator.java:1087)
import org.dmd.dmc.types.CamelCaseName;                                                    // Is named by - (BaseDMWGenerator.java:1062)
import org.dmd.dms.ClassDefinition;                                                        // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:1067)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                                // Required for MODREC constructor - (BaseDMWGenerator.java:1072)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                      // Required for MODREC constructor - (BaseDMWGenerator.java:1071)
import org.dmd.mvw.tools.mvwgenerator.extended.Controller;                                 // Is reference type - (BaseDMWGenerator.java:1107)
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                              // Derived class - (BaseDMWGenerator.java:1248)
import org.dmd.mvw.tools.mvwgenerator.extended.Place;                                      // Is reference type - (BaseDMWGenerator.java:1107)
import org.dmd.mvw.tools.mvwgenerator.extended.WebApplication;                             // Required for getModificationRecorder() - (BaseDMWGenerator.java:1076)
import org.dmd.mvw.tools.mvwgenerator.extended.menus.MenuImplementationConfig;             // Is reference type - (BaseDMWGenerator.java:1107)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ControllerDMO;                         // For multi-valued adds of Controller - (BaseDMWGenerator.java:1767)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                              // Attribute usesController from the mvw schema - (BaseDMWGenerator.java:897)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.WebApplicationDMO;                     // Class not auxiliary or abstract - (BaseDMWGenerator.java:1252)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ControllerIterableDMW;                 // For multi-valued Controller - (BaseDMWGenerator.java:1709)
import org.dmd.mvw.tools.mvwgenerator.generated.types.MenuImplementationConfigREF;         // Is reference type REF - (BaseDMWGenerator.java:1115)
import org.dmd.mvw.tools.mvwgenerator.generated.types.PlaceREF;                            // Is reference type REF - (BaseDMWGenerator.java:1115)



/**
 * The WebApplication definition allows for the definition of the
 * superstructure\n for an application, basically it's the definition of the
 * overall application controller.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:479)
 */
abstract public class WebApplicationDMW extends MvwDefinition implements DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:558)
    public WebApplicationDMW() {
        super(new WebApplicationDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._WebApplication);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:564)
    public WebApplicationDMW(DmcTypeModifierMV mods) {
        super(new WebApplicationDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._WebApplication);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:606)
    public WebApplication getModificationRecorder(){
        WebApplication rc = new WebApplication();
        rc.setAppName(getAppName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:627)
    public WebApplicationDMW(WebApplicationDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._WebApplication);
    }

    public WebApplication cloneIt() {
        WebApplication rc = new WebApplication();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public WebApplicationDMO getDMO() {
        return((WebApplicationDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:642)
    protected WebApplicationDMW(WebApplicationDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1297)
    public CamelCaseName getObjectName(){
        return(((WebApplicationDMO) core).getAppName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((WebApplicationDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof WebApplicationDMW){
            return( getObjectName().equals( ((WebApplicationDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public CamelCaseName getAppName(){
        return(((WebApplicationDMO) core).getAppName());
    }

    /**
     * Sets appName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setAppName(Object value) throws DmcValueException {
        ((WebApplicationDMO) core).setAppName(value);
    }

    /**
     * Sets appName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setAppName(CamelCaseName value){
        ((WebApplicationDMO) core).setAppName(value);
    }

    /**
     * Removes the appName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remAppName(){
        ((WebApplicationDMO) core).remAppName();
    }

    /**
     * @return A Place object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1434)
    public Place getDefaultPlace(){
        PlaceREF ref = ((WebApplicationDMO) core).getDefaultPlace();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((Place)ref.getObject().getContainer());
    }

    /**
     * Sets the defaultPlace to the specified value.
     * @param value A value compatible with PlaceREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1519)
    public void setDefaultPlace(Place value) {
        ((WebApplicationDMO) core).setDefaultPlace(value.getDMO());
    }

    /**
     * Sets the defaultPlace to the specified value.
     * @param value A value compatible with PlaceREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1528)
    public void setDefaultPlace(Object value) throws DmcValueException {
        ((WebApplicationDMO) core).setDefaultPlace(value);
    }

    /**
     * Removes the defaultPlace attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remDefaultPlace(){
        ((WebApplicationDMO) core).remDefaultPlace();
    }

    /**
     * @return A MenuImplementationConfig object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1434)
    public MenuImplementationConfig getMenuImplementation(){
        MenuImplementationConfigREF ref = ((WebApplicationDMO) core).getMenuImplementation();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((MenuImplementationConfig)ref.getObject().getContainer());
    }

    /**
     * Sets the menuImplementation to the specified value.
     * @param value A value compatible with MenuImplementationConfigREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1519)
    public void setMenuImplementation(MenuImplementationConfig value) {
        ((WebApplicationDMO) core).setMenuImplementation(value.getDMO());
    }

    /**
     * Sets the menuImplementation to the specified value.
     * @param value A value compatible with MenuImplementationConfigREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1528)
    public void setMenuImplementation(Object value) throws DmcValueException {
        ((WebApplicationDMO) core).setMenuImplementation(value);
    }

    /**
     * Removes the menuImplementation attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remMenuImplementation(){
        ((WebApplicationDMO) core).remMenuImplementation();
    }

    /**
     * @return The number of Controller items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getUsesControllerSize(){
        return(((WebApplicationDMO) core).getUsesControllerSize());
    }

    /**
     * @return true if there are no ControllerDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getUsesControllerIsEmpty(){
        if (((WebApplicationDMO) core).getUsesControllerSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ControllerDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getUsesControllerHasValue(){
        if (((WebApplicationDMO) core).getUsesControllerSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of ControllerDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1716)
    public ControllerIterableDMW getUsesControllerIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__usesController);
        if (attr == null)
            return(ControllerIterableDMW.emptyList);
        
        return(new ControllerIterableDMW(((WebApplicationDMO) core).getUsesController()));
    }

    /**
     * Adds another usesController value.
     * @param value A value compatible with Controller
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1773)
    public DmcAttribute<?> addUsesController(Controller value){
        DmcAttribute<?> attr = ((WebApplicationDMO) core).addUsesController(((ControllerDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a usesController value.
     * @param value The Controller to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1823)
    public void delUsesController(Controller value){
        ((WebApplicationDMO) core).delUsesController(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Controller objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1887)
    public ArrayList<Controller> getUsesControllerCopy(){
        DmcAttribute<?> attr = ((WebApplicationDMO) core).get(MvwDMSAG.__usesController);
        if (attr == null)
            return(new ArrayList<Controller>());
        
        ArrayList<Controller> rc = new ArrayList<Controller>(attr.getMVSize());
        
        ControllerIterableDMW it = getUsesControllerIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the usesController attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remUsesController(){
        ((WebApplicationDMO) core).remUsesController();
    }


}
